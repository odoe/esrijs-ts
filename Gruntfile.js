/* jshint node:true */

module.exports = function (grunt) {
  grunt.loadNpmTasks('grunt-ts');
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadNpmTasks('grunt-contrib-clean');
  grunt.loadNpmTasks('grunt-contrib-stylus');

  grunt.initConfig({
    all: [ 'src/app/*.ts', 'src/app/**/*.ts', 'src/app/resources/*.styl', '!bower_components/**/*.ts', '!tests/**/*.ts', '!node_modules/**/*.ts', '!html-report/**/*', '!**/templates/**/*.ts' ],
    ignoreDefinitions: [ '<%= all %>', '!**/*.d.ts' ],
    tests: [ 'tests/**/*.ts', '!tests/unit/temp/**/*.ts' ],

    clean: {
      generator: {
        src: [
          '**/{*.js,*.js.map}', '!node_modules/**/*'
        ],
        filter: function (filepath) {
          var jsName = filepath.match(/(.*\.js)(?:\.map)?$/)[1];

          // Only clean .js and .js.map files if BOTH the JavaScript and the map file exist.
          // Since the only thing generating map files is grunt-ts, this targets only the
          // JavaScript files generated by that process (including JavaScript files
          // generated for TypeScript files that have been moved or deleted).
          return grunt.file.exists(jsName) && grunt.file.exists(jsName + '.map');
        }
      }
    },

    stylus: {
      compile: {
        files: {'src/app/resources/main.css': 'src/app/resources/main.styl'}
      }
    },

    ts: {
      options: {
        target: 'es5',
        module: 'amd',
        sourceMap: true,
        noImplicitAny: true,
        fast: 'never'
      },
      default: {
        src: ['src/app/*.ts', 'src/app/**/*.ts']
      }/*
      generator: {
        src: [ '<%= ignoreDefinitions %>' ]
        }*/
    },

    watch: {
      generator: {
        files: [ '<%= all %>' ],
        tasks: [ 'ts:default', 'stylus' ]
      },
      tests: {
        files: [ '<%= tests %>' ],
        tasks: [ 'ts:tests' ]
      }
    }
  });

  grunt.registerTask('build', [ 'ts' ]);
  grunt.registerTask('default', [ 'ts', 'watch' ]);
};
